void *T0 (void *args) {               |   void *T1 (void *args) {
 while(1) {                           |       while(1) {
 querEntrar0 = 1;                     |        querEntrar1 = 1;
 turno = 1;                           |        turno = 0;
 while((querEntrar1==1) &&            |        while((querEntrar0==1) &&
 (turno==1)) { ; }                    |           (turno==0)) { ; }
 //..seção crítica                    |        //..seção crítica
 querEntrar0 = 0;                     |        querEntrar1 = 0;
 //..fora da seção crítica            |        //..fora da seção crítica
  }}                                  |    }}

(a) A variável turno, lida com esse caso em que as duas chegam juntas, ela vai garantir que se as duas cheragem juntas apenas uma irá 
executar a seção crítica.

(b) Digamos que as threads T0 e T1 estejam executando, e T0 tente acessar sozinha a sua seção crítica ela irá repetir esse processo por 
várias vezes enquanto a T1 não acessar a sua seção crítica e alterar querEntrar1. Pois a T0 só deixaria de tentar acessar sua seção
crítica quando uma das sentenças do while dê false.

(c) A thread que estava esperando terá prioridade para entrar na seção crítica.

(d) A ideia da exclusão mútua é evitar que duas ou mais threads que estejam executando simultaneamente tenham acesso a um recurso 
compartilhado. O códigogarante isso, pois faz uso das variáveis necessárias para "lockar" o acesso a esses recurusos 
compartilhados, mesmo que não faça uso direto de variáveis de lock da biblioteca pthread.h.

(e) Não!

--DEFINIÇÔES--

1. Deadlock (Interbloqueio):

O deadlock ocorre quando duas ou mais threads ou processos ficam presos em um ciclo, onde cada um está esperando por um recurso que o 
outro possui, e nenhum pode continuar sua execução. Isso resulta em uma paralisação do sistema ou de parte dele.

2. Starvation (Inanição):

Ocorre quando uma thread ou processo está constantemente impedido de acessar um recurso porque outras threads estão sempre adquirindo 
esses recursos antes. Mesmo que o sistema esteja funcionando, a thread afetada não consegue progredir.

3. Livelock:

O livelock é uma situação semelhante ao deadlock, mas em vez das threads ou processos estarem bloqueados, eles continuam a mudar de 
estado ou realizar operações repetitivas sem fazer progresso. Eles continuam "vivos", mas não chegam a uma conclusão útil.